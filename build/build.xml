<?xml version="1.0" encoding="ISO-8859-1"?>
<project xmlns:resolver="antlib:org.apache.maven.resolver.ant" basedir=".." default="all" name="All">
  <property name="build.dir" value="build" />

  <taskdef uri="antlib:org.apache.maven.resolver.ant" resource="org/apache/maven/resolver/ant/antlib.xml">
    <classpath>
      <fileset dir="build" includes="maven-resolver-ant-tasks-*uber.jar" />
    </classpath>
  </taskdef>

  <target name="resolve-dependencies" description="get dependencies with maven">
    <resolver:pom file="pom.xml" id="pom" />
    <resolver:resolve failonmissingattachments="true">
      <resolver:path refid="cp" classpath="compile" />
    </resolver:resolve>
    <!-- Download dependencies into lib dir to enable current workflow of testing the plugin -->
    <resolver:resolve failonmissingattachments="true">
      <resolver:files dir="lib"
                      scopes="compile,runtime"
                      layout="{artifactId}.{extension}" />
    </resolver:resolve>
    <!-- Download test dependencies for Eclipse -->
    <mkdir dir="lib.test" />
    <resolver:resolve failonmissingattachments="true">
      <resolver:files dir="lib.test"
                      scopes="test"
                      layout="{artifactId}.{extension}" />
    </resolver:resolve>
  </target>

  <target name="init" description="inits the build" depends="resolve-dependencies">
    <buildnumber file="${build.dir}/BUILD" />
    <tstamp>
      <format property="build.timestamp" pattern="yyyyMMdd" />
    </tstamp>
    <xmlproperty file="plugin.xml" collapseattributes="true" />
    <loadproperties srcfile="${build.dir}/build.properties" />


    <echo message="VERSION: ${plugin.version}" level="info" />
    <echo message="BUILD  : ${build.number}" level="info" />
    <echo message="JAVA   : ${java.version}" level="info" />

    <path id="compilepath">
      <path refid="cp" />
      <fileset dir="${lib.dir}">
        <include name="nc.jar" />
      </fileset>
      <fileset dir="../hibiscus/lib">
        <include name="**/*.jar" />
      </fileset>
      <fileset dir="../jameica/lib">
        <include name="**/*.jar" />
        <exclude name="apache_xmlrpc/**" />
        <exclude name="bouncycastle/**" />
        <exclude name="mckoi/**" />
        <exclude name="h2/**" />
        <exclude name="mysql/**" />
        <exclude name="paperclips/**" />
        <exclude name="swt/linux/**" />
        <exclude name="swt/linux-arm64/**" />
        <exclude name="swt/macos*/**" />
        <exclude name="swt/win32/**" />
        <exclude name="swt/win64/**" />
      </fileset>
      <pathelement path="../hibiscus/bin" />
      <pathelement path="../jameica/bin" />
      <pathelement path="../jameica/releases/jameica-lib.jar" />
      <pathelement path="../hibiscus/releases/hibiscus-lib.jar" />
    </path>

    <path id="classpath">
      <path refid="compilepath" />
      <pathelement location="${class.dir}" />
    </path>
  </target>

  <target name="compile" depends="init">
    <mkdir dir="${class.dir}" />
    <javac debug="true" includeantruntime="false" debuglevel="lines,vars,source" release="${define.java.version}"
           encoding="${define.encoding}" deprecation="true" destdir="${class.dir}" srcdir="${src.dir}">
      <classpath refid="compilepath" />
    </javac>
  </target>

  <target name="jar" depends="init,compile" description="Generates the jar file">
    <mkdir dir="${project.zipdir}" />
    <tstamp />
    <jar destfile="${project.zipdir}/${define.jarfilename}">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-Date" value="${DSTAMP}" />
        <attribute name="Implementation-Title" value="${plugin.name}" />
        <attribute name="Implementation-Version" value="${plugin.version}" />
        <attribute name="Implementation-Buildnumber" value="${build.number}" />
        <attribute name="Class-Path" value="lang help lib" />
      </manifest>
      <fileset dir="${class.dir}" />
      <fileset dir="${src.dir}">
        <exclude name="*.java" />
      </fileset>
    </jar>

    <mkdir dir="${project.zipdir}/lib" />
    <copy todir="${project.zipdir}/lib">
      <fileset dir="${lib.dir}" />
    </copy>

    <copy todir="${project.zipdir}" file="plugin.xml" />
    <replace file="${project.zipdir}/plugin.xml">
      <replacefilter token="[PLUGIN_ZIP]" value="${project.zipfilename}" />
    </replace>

    <!-- Jetzt muessen wir noch das ZIP-File erzeugen -->
    <zip destfile="${project.release}/${project.zipfilename}">
      <fileset dir="${project.release}">
        <include name="${plugin.name}" />
        <include name="${plugin.name}/**" />
      </fileset>
    </zip>
  </target>

  <target name="javadoc" depends="init" description="Creates the api doc">
    <mkdir dir="${project.javadoc}" />
    <javadoc destdir="${project.javadoc}" packagenames="${define.package}.*" encoding="${define.encoding}">
      <classpath refid="compilepath" />
      <sourcepath>
        <pathelement location="${src.dir}" />
      </sourcepath>
    </javadoc>
  </target>

  <!--  
  <target name="junit" depends="init" description="JUnit-Tests">
    <junit printsummary="yes" haltonfailure="yes">
      <classpath refid="classpath" />

      <formatter type="plain" usefile="false"/>

      <test name="test.de.jost_net.JVerein.TestSuite" haltonfailure="yes">
        <formatter type="xml" usefile="false" />
      </test>
    </junit>
  </target>
-->
  <target name="src" description="Build an source package, depends compile target to make sure, the code has no errors">
    <mkdir dir="${project.release}" />
    <mkdir dir="${project.tmp}/${plugin.name}" />
    <copy todir="${project.tmp}/${plugin.name}">
      <fileset dir="${basedir}">
        <include name=".project" />
        <include name=".classpath" />
        <include name="${src.dir}/**" />
        <include name="${build.dir}/**" />
        <exclude name="${build.dir}/BUILD" />
      </fileset>
    </copy>
    <zip casesensitive="true" zipfile="${project.release}/${define.srcfilename}">
      <fileset dir="${project.tmp}">
        <include name="${plugin.name}/**" />
      </fileset>
    </zip>
  </target>

  <target name="clean" description="Cleanup">
    <loadproperties srcfile="${build.dir}/build.properties" />
    <delete dir="${project.tmp}" />
    <delete dir="${class.dir}" />
    <delete includeemptydirs="true">
      <fileset dir="${lib.dir}">
        <exclude name="nc.jar" />
      </fileset>
    </delete>
    <delete dir="lib.test" />
  </target>

  <target name="lib">
    <!-- Die Datei brauchen die anderen Plugins zum Kompilieren //-->
    <copy file="${project.zipdir}/${define.jarfilename}" tofile="releases/jverein-lib.jar" />
  </target>

  <target name="all" depends="init,jar,javadoc,src" description="Build an official openjverein release">
    <echo message="SELECTED_VERSION=${plugin.version}" />
    <echo message="SELECTED_PATH=${project.release}/${project.zipfilename}" />
    <echo message="SELECTED_FILENAME=${project.zipfilename}" />
  </target>

  <target name="fast" depends="init,jar,src" description="Build an development release">
    <move file="${project.release}/${project.zipfilename}" tofile="${project.release}/${project.zipfilename}" />
  </target>

  <target name="nightly" depends="init,compile,jar,javadoc,src" description="Build an nightly release">
    <mkdir dir="${project.release.nightly}" />

    <copy file="${project.release}/${project.zipfilename}"
          tofile="${project.release.nightly}/${project.zipfilename.nightly}" />
    <copy file="${project.release}/${define.srcfilename}"
          tofile="${project.release.nightly}/${define.srcfilename.nightly}" />

    <antcall target="lib" />

    <delete dir="${project.release}" />

    <echo message="SELECTED_VERSION=${plugin.version}-nightly" />
    <echo message="SELECTED_PATH=${project.release.nightly}/${project.zipfilename.nightly}" />
    <echo message="SELECTED_FILENAME=${project.zipfilename.nightly}" />
  </target>

  <target name="build-dependencies" description="Downloads and builds Jameica and Hibiscus"
          depends="init">
    <antcall target="build-package">
      <param name="name" value="jameica" />
      <param name="url" value="${jameica.url}" />
      <param name="version" value="${jameica.version}" />
    </antcall>
    <antcall target="build-package">
      <param name="name" value="hibiscus" />
      <param name="url" value="${hibiscus.url}" />
      <param name="version" value="${hibiscus.version}" />
    </antcall>
  </target>

  <target name="build-package">
    <!-- Download package -->
    <get src="${url}/${version}.zip"
         dest="${name}-${version}.zip"
         skipexisting="true" />

    <!-- Unpack into folder $name -->
    <unzip src="${name}-${version}.zip"
           dest="../" />
    <move file="../${name}-${version}"
          tofile="../${name}" />

    <!-- Run build -->
    <ant dir="../${name}" antfile="build/build.xml" inheritall="false">
      <target name="nightly" />
    </ant>
  </target>

</project>
